Program ::= Decl Program'
Program' ::= Program | ε
Decl ::= Decl' Decl
Decl' ::= VariableDecl| FunctionDecl| ConstDecl| ClassDecl| InterfaceDecl
VariableDecl ::= VarieblaVariableDecl|Variable| ε
Variables ::= TypeA ident
TypeA ::= Type keys
keys ::= [] | ε
Type ::= int| double| bool| string| ident
FunctionDecl ::= FunctionDecl' ident (Formals) stmtBlock
FunctionDecl' ::= Type| void
ConstDecl ::= Static ConstType ident ConstDecl| ε| Static ConstType ident
ConstType ::= int|doueble|bool|string
ClassDecl ::= class ident extendsA implementA {Field}
extendsA ::= extends id | ε
implementA ::= implement id, | ε
id ::= ident id | ident 
Field ::= VariableDecl Field'| FunctionDeclField'| ConstDeclField'|  ε
Field' ::= Field
InterfaceDecl ::= Interface ident {Prototype}
Prototype ::= Prot ident (Formals); Prototype | ε
Prot ::= Type| Void
Formals ::= Variable, Formals|Variable
StmtBlock ::= {VariableDecl ConstDecl Stmt}
Stmt ::= Expr;| IfStmt| WhileStmt| ForStmt| BreakStmt| ReturnStmt| PrintStmt| StmtBlock| ε
IfStmt ::= if (Expr) Stmt IfStmt'
IfStmt' ::= else stmt| ε
WhileStmt ::= while(Expr) Stmt
ForStmt ::= For(Expr; Expr; Expr) Stmt
ReturnStmt ::= return Expr:
BreakStmt ::= break;
PrintStmt ::= System.out.println(Expr);
Expr ::= LValue = ExprExpr'| ConstantExpr'| LValueExpr'| thisExpr'| (Expr'Expr)| New(ident)| E Expr'
E ::= TE'
E' ::= /TE'| -TE'| ε
T ::= FT'
T' ::= %FT'| >FT'| ε
F ::= GF'
F' ::= >=GF'| !=GF'| ε
G ::= !G| ||G | -G| LValue
Expr' ::= Expr| ε
LValue ::= ident| Expr.ident
Constant ::= intConstant| doubleConstant| booleanConstant| stringConstant| null